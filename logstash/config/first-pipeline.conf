input {
    beats {
        port => "5043"
    }
}
filter {
    if [type] == "restaurants" {
        csv {
            columns => ["Restaurant Name","Zip Code","Inspection Date","Score","Address","Facility ID","Process Description"]
        }
        date {
            match => [ "Inspection Date", "MM/dd/yyyy" ]
            timezone => "America/New_York"
        }
    }
    if [type] == "political_donations" {
        csv {
            columns => ["cycle","Donor","contributor_ext_id","occupations","employers","donation_total"]
        }
    }
    if [type] == "NTSB" {
        csv {
            separator => "|"
            columns => ["Event Id","Investigation Type","Accident Number","Event Date",
                "Location","Country","Latitude","Longitude","Airport Code","Airport Name",
                "Injury Severity","Aircraft Damage","Aircraft Category","Registration Number","Make","Model",
                "Amateur Built","Number of Engines","Engine Type","FAR Description","Schedule","Purpose of Flight","Air Carrier",
                "Total Fatal Injuries","Total Serious Injuries","Total Minor Injuries","Total Uninjured",
                "Weather Condition","Broad Phase of Flight","Report Status","Publication Date"]
        }
        mutate {
            convert => { 
                "Latitude" => "float" 
                "Longitude" => "float" 
                "Number of Engines" => "integer"
                "Total Fatal Injuries" => "integer"
                "Total Serious Injuries" => "integer"
                "Total Minor Injuries" => "integer"
                "Total Uninjured" => "integer" 
            }
        }
        mutate {
            gsub => [
                # remove spaces
                "Event Date", " ", "",
                "Publication Date", " ", ""
            ]
        }
        date {
            match => [ "Event Date", "MM/dd/yyyy" ]
            timezone => "America/New_York"
        }
        date {
            match => [ "Event Date", "MM/dd/yyyy" ]
            timezone => "America/New_York"
            target => "Event Date"
        }
        date {
            match => [ "Publication Date", "MM/dd/yyyy" ]
            timezone => "America/New_York"
            target => "Publication Date"
        }
        mutate {
            rename => {
                "Latitude" => "[location][lat]"
                "Longitude" => "[location][lon]"
            }
        }
    }
}

output {
    if [type] == "restaurants" {
        elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            user => "elastic"
            password => "changeme"
            action => "index"
            index => "restaurants"
            manage_template => true
            template => "/etc/logstash/conf.d/US_zipcode_to_geopoint.yaml"
            template_overwrite => "true"
        }
    }
    if [type] == "political_donations" {
        elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            user => "elastic"
            password => "changeme"
            action => "index"
            index => "political_donations"
            manage_template => true
            template => "/etc/logstash/conf.d/US_zipcode_to_geopoint.yaml"
            template_overwrite => "true"
        }
    }
    if [type] == "NTSB" {
        elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            user => "elastic"
            password => "changeme"
            action => "index"
            index => "ntsb"
            manage_template => true
            template => "/etc/logstash/conf.d/US_zipcode_to_geopoint.yaml"
            template_overwrite => "true"
        }
    }
    if [type] == "chargebacks" {
        elasticsearch {
            hosts => [ "elasticsearch:9200" ]
            user => "elastic"
            password => "changeme"
            action => "index"
            index => "chargebacks"
            manage_template => true
            template => "/etc/logstash/conf.d/US_zipcode_to_geopoint.yaml"
            template_overwrite => "true"
        }
    }

    stdout { codec => rubydebug }
}




